extends layout

block content
  .jumbotron(style="background:transparent")
    .container-fluida#uvapp
      .row
        .col-sm-3
        .col-sm-6
          .input-group
            input.form-control#handle(type='text', placeholder='username', name='handle', v-model='handle', @keydown.enter="submitHandle")
            span.input-group-append
              button.btn.btn-primary#submitHandle(:class="{disabled : processing}", v-on:click="submitHandle")
                template(v-if="processing == true")
                  div(class="preloader")
                template(v-else) Go!

        .col-sm-3
      .row#tables(style="margin-top: 16px;" v-if="problems && problems.length > 0")
        .col-md-4
          h4 Easy
          table.table.table-condensed#problems(style="margin-top: 16px; border-radius: 4px;")
            tbody
              tr
                td ID
                td Number
                td Title
                td Solves
              tr(v-for="problem in easy")
                td {{ problem[0] }}
                td
                  a(:href="problem.url" target="_blank") {{ problem[1] }}
                td {{ problem[2] }}
                td {{ problem[3] }}
        .col-md-4
          h4 Medium
          table.table.table-condensed#problemsM(style="margin-top: 16px; border-radius: 4px;")
            tbody
              tr
                td ID
                td Number
                td Title
                td Solves
              tr(v-for="problem in medi")
                td {{ problem[0] }}
                td
                  a(:href="problem.url" target="_blank") {{ problem[1] }}
                td {{ problem[2] }}
                td {{ problem[3] }}
        .col-md-4
          h4 Brutal
          table.table.table-condensed#problemsH(style="margin-top: 16px; border-radius: 4px;")
            tbody
              tr
                td ID
                td Number
                td Title
                td Solves
              tr(v-for="problem in hard")
                td {{ problem[0] }}
                td
                  a(:href="problem.url" target="_blank") {{ problem[1] }}
                td {{ problem[2] }}
                td {{ problem[3] }}

  script(src="//cdn.jsdelivr.net/npm/vue")
  script.
    const UVA_LOCAL_USERNAME = "fa_preferred_uva_username";
    const UVA_PROBLEMS = "fa_uva_problems";
    const NUM_PER_PAGE = 10;

    let augmentUrl = function(problems) {
      for (let i = 0; i < problems.length; i++) {
        let content = String(problems[i][1]);
        let url = "//uva.onlinejudge.org/external/";
        if (content.length < 4) {
          url += content[0] + '/' + content + '.pdf';
        } else {
          url += content.substring(0, 3) + '/' + content + '.pdf';
        }
        problems[i].url = url;
      }
    };

    let uvapp = new Vue({
      el: "#uvapp",
      data: {
        handle: null,
        problems: null,
        easy: null,
        medi: null,
        hard: null,
        processing: false,
      },
      mounted: function() {
        this.handle = window.localStorage.getItem(UVA_LOCAL_USERNAME);
        this.problems = JSON.parse(window.localStorage.getItem(UVA_PROBLEMS));
        this.updateProblems(this.problems);
      },
      methods: {
        updateProblems: function(problems) {
          this.problems = problems;
          if (this.problems) {
            this.problems = this.problems.problems;
            let l = this.problems.length;
            this.easy = this.problems.slice(0, 10);
            this.medi = this.problems.slice(l / 2, l / 2 + 10);
            this.hard = this.problems.slice(l * 3 / 4 - 10, l * 3 / 4);
            augmentUrl(this.easy);
            augmentUrl(this.medi);
            augmentUrl(this.hard);
          }
        },
        submitHandle: function(event) {
          this.processing = true;
          fetch("/uva/problems/recommended/" + this.handle)
            .then(res => res.json())
            .then((data) => {
              if (data.length == 0) {
                alert("not found");
              }
              window.localStorage.setItem(UVA_LOCAL_USERNAME, this.handle);
              window.localStorage.setItem(UVA_PROBLEMS, JSON.stringify(data));
              this.updateProblems(data);
              this.processing = false;
            });
        }
      }
    });
