doctype html
html
  head
    title= title
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, shrink-to-fit=no')
    link(rel="stylesheet"
      href="//stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
      integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
      crossorigin="anonymous")

    link(rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css")
    link(rel='stylesheet', href='lib/codemirror.css')
    link(rel='stylesheet', href='addon/hint/show-hint.css')
    link(rel='stylesheet', href='addon/dialog/dialog.css')
    link(rel='stylesheet', href='addon/display/fullscreen.css')
    link(rel='stylesheet', href='theme/solarized.css')
    link(rel='stylesheet', href='theme/monokai.css')
    link(rel='stylesheet', href='theme/dracula.css')
    link(rel='stylesheet', href='theme/zenburn.css')
    link(rel='stylesheet', href='theme/blackboard.css')
    link(rel='stylesheet', href='theme/tomorrow-night-bright.css')
    link(rel='stylesheet', href='theme/tomorrow-night-eighties.css')

    script(
      src="//code.jquery.com/jquery-3.3.1.min.js"
      integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
      crossorigin="anonymous")

    script(src="//code.jquery.com/ui/1.12.1/jquery-ui.min.js"
      integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU="
        crossorigin="anonymous")

    script(src="//cdnjs.cloudflare.com/ajax/libs/jquery.touch/1.1.0/jquery.touch.min.js")

    script(
      src="//cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
      integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
      crossorigin="anonymous")
    script(
      src="//stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
      integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
      crossorigin="anonymous")
    script(src='lib/codemirror.js')
    script(src='keymap/vim.js')
    script(src='keymap/sublime.js')
    script(src='keymap/emacs.js')
    script(src='addon/dialog/dialog.js')
    script(src='addon/search/searchcursor.js')
    script(src='addon/edit/matchbrackets.js')
    script(src='addon/runmode/colorize.js')
    script(src='addon/hint/show-hint.js')
    script(src='addon/display/fullscreen.js')
    script(src='mode/python/python.js')
    script(src='mode/clike/clike.js')
    style.
      body {
        display: block;
        position: absolute;
        height: 100%;
        width: 100%;
      }

      .CodeMirror {
        height: 100%;
        width: 100%;
      }

      .CodeMirror-scroll {
        overflow-y: scroll;
        overflow-x: hidden;
      }

      #codemirror-container {
        position: fixed;
        top: 0;
        display: block;
        height: 75%;
        width: 100% !important;
      }

      #io {
        position: fixed;
        display: block;
        background-color: #f8f9fa;
        /* height: 25%; */
        width: 100%;
        padding-bottom: 56px;
        z-index: 505050;
        bottom: 0;
      }

      #input-header,
      #output-header {
        display: inline-block;
        position: relative; 
        padding: 12px;
        margin: 0;
        height: 20px; 
        width: 50%; 
        box-sizing: border-box;
      }

      #input-header > p,
      #output-header > p {
        margin: 0;
      }

      #input-container,
      #output-container {
        display: inline-block; 
        position: relative; 
        width: 50%; 
        height: 100%;
        top: 0;
        padding: 12px;
        box-sizing: border-box;
      }

      #input, #output {
        width: 100%; 
        height: 100%; 
        position: relative; 
        top: 0;
      }


      ul li {
        cursor: pointer;
      }

      .preloader {
        border: 3px solid #ffffff;
        height: 16px;
        width: 16px;
        border-top: 3px solid rgba(0, 0, 0, 0);
        border-radius: 50%;
        animation: spin 2s linear infinite;
      }

      table {
        width: 100%;
      }

      td {
        max-width: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }

      #tables {
        margin-top: 16px;
      }

      #settings {
        background-color: #f8f9fa;
        position: fixed;
        right: 12px;
        bottom: 68px;
        height: 120px;
        padding: 16px;
        z-index: 999999;
        border-radius: 8px;
      }

      .col .btn-group {
        margin: auto;
      }

      .ui-resizable-handle.ui-resizable-s {
        cursor: ns-resize;
        height: 10px;
        background-color: #dddddd;
        z-index: 9999999;
        -webkit-box-shadow: 1px -1px 4px 0px rgba(99,99,99,1);
        -moz-box-shadow: 1px -1px 4px 0px rgba(99,99,99,1);
        box-shadow: 1px -1px 4px 0px rgba(99,99,99,1);
      }

      .collaspse {
        transition: none !important;
      }

      .collapsing {
        -webkit-transition: none;
        transition: none;
        display: none;
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      *, *:before, *:after {
        box-sizing: border-box;
      }
  body
    #ideapp
      #codemirror-container
        textarea#code(name='code')

      .collapse#settings
        .row
          .col
          .col
            .btn-group.dropup(role='toolbar')
              .btn-group(role='group')
                button.btn.btn-outline-secondary.dropdown-toggle#editorSelect(type='button' data-toggle='dropdown' aria-haspopup='true'
                  aria-expanded='false' style="width: 100px;") {{ cur_editor == null ? "Editor" : cur_editor }} 
                span.caret
                ul.dropdown-menu#editor-type(aria-labelledby='editorSelect')
                  li.dropdown-item(v-for="editor in editors" v-on:click="setCurEditor(editor)")
                    a(:value='editor') {{ editor }} 

              .btn-group(role='group')
                button.btn.btn-outline-secondary.dropdown-toggle#themeSelect(type='button' data-toggle='dropdown' aria-haspopup='true'
                  aria-expanded='false' style="width: 200px;") {{ cur_theme == null ? "Theme" : cur_theme }} 
                  span.caret
                ul.dropdown-menu#theme(aria-labelledby='themeSelect')
                  li.dropdown-item(v-for="theme in themes" v-on:click="setCurTheme(theme)")
                    a(:value='theme') {{ theme }}
          .col

      #io(:style="{height: showio ? recomputeHeight() : '0px'}")
        #input-container
          textarea.form-control#input(name='input', placeholder='input' v-model="input")
        #output-container
          textarea.form-control#output(name='output', placeholder='output' v-model="output")

      nav.navbar.navbar-light.bg-light.fixed-bottom(style="z-index:99999999999;")
        .container-fluid
          .btn-group.dropup(role='toolbar')
            button.btn.btn-primary#compile(:disabled='cur_lang == null || processing', @click="sendRunRequest")
              template(v-if="processing == true")
                div(class="preloader")
              template(v-else) Run 
            .btn-group(role='group', style="width: 100px;")
              button.btn.btn-outline-secondary.dropdown-toggle#langSelect(type='button' data-toggle='dropdown' aria-haspopup='true' 
                aria-expanded='false') {{ cur_lang == null ? "Language" : lMap[cur_lang] }}

              ul.dropdown-menu#langss(aria-labelledby='langSelect') 
                li.dropdown-item(v-for="lang in langs" v-on:click="setCurLang(lang)")
                  a(:value='lang') {{ lMap[lang] }}

          .btn-group  
            button.btn.btn-outline-secondary#settings-btn(data-toggle="collapse" data-target="#settings")
              !{settings_icon}
            button.btn.btn-outline-secondary(@click="toggleIO()") io

  script(src="//cdn.jsdelivr.net/npm/vue")
  script.
    let ideapp = new Vue({
      el: "#ideapp",
      data: {
        editor: null,
        cur_editor: null,
        cur_theme: null,
        cur_lang: null,
        code: "",
        input: "",
        output: "",
        editors: ['vim', 'emacs', 'sublime', 'default'],
        themes: ['solarized dark', 'solarized light', 'blackboard', 'dracula', 'monokai', 'zenburn', 'tomorrow-night-bright', 'tomorrow-night-eighties', 'default'],
        langs: ['python', 'python3', 'gcc', 'g++', 'java'],
        lMap: {
          'python': 'Python 2',
          'python3': 'Python 3',
          'g++': 'C++',
          'gcc': 'C',
          'java': 'Java'
        },
        modeMap: {
          'python': 'python',
          'python3': 'python',
          'gcc': 'text/x-csrc',
          'g++': 'text/x-c++src',
          'java': 'text/x-java',
        },
        lastioheight: 0,
        processing: false,
        showio: true,
      },
      mounted: function() {
        let that = this;
        this.editor = CodeMirror.fromTextArea(document.getElementById("code"), {
          lineNumbers: true,
          mode: "python",
          viewportMargin: Infinity,
          extraKeys: {
            "Esc": function(cm) {
              if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
            },
            "Ctrl-Enter": that.sendRunRequest,
            "Ctrl-Space": "autocomplete",
            "F11": function(cm) {
              cm.setOption("fullscreen", !cm.getOption("fullscreen"));
            }
          }
        });
        this.cur_editor = window.localStorage.getItem("fa_preferred_editor");
        this.cur_theme = window.localStorage.getItem("fa_preferred_theme");
        this.cur_language = window.localStorage.getItem("fa_preferred_language");
        this.code = window.localStorage.getItem("code");
        this.setCurEditor(this.cur_editor);
        this.setCurTheme(this.cur_theme);
        this.setCurLang(this.cur_language);
        this.setCode(this.code);
        $('#codemirror-container').resizable({
          handles: "s",
          maxHeight: $(window).height() - 64,
          resize: function(event, ui) {
            $('#io').height($(window).height() - $(this).height() - 56);
          }
        });
        window.setInterval(this.saveCode, 10000);
      },
      methods: {
        toggleIO : function() {
          if (this.showio) {
            this.lastioheight = $('#io').height();
            $('#codemirror-container').height($(window).height() - 64);
          } else {
            $('#codemirror-container').height($(window).height() - this.lastioheight - 56);
            $('#io').height(this.lastioheight);
          }
          this.showio = !this.showio;
        },
        recomputeHeight: function() {
          return window.innerHeight -
            document.getElementById("codemirror-container").offsetHeight + 'px';
        },
        setCurEditor: function(editor) {
          if (editor == null) return;
          this.cur_editor = editor;
          this.editor.setOption("keyMap", editor);
          window.localStorage.setItem("fa_preferred_editor", editor);

        },
        setCurTheme: function(theme) {
          if (theme == null) return;
          this.cur_theme = theme;
          this.editor.setOption("theme", theme);
          window.localStorage.setItem("fa_preferred_theme", theme);
        },
        setCurLang: function(lang) {
          if (lang == null) return;
          this.cur_lang = lang;
          this.editor.setOption("mode", this.modeMap[lang]);
          window.localStorage.setItem("fa_preferred_language", lang);
        },
        setCode: function(code) {
          if (code == null) return;
          this.code = code;
          this.editor.setValue(code);
          window.localStorage.setItem("code", code);
        },
        saveCode: function() {
          window.localStorage.setItem("code", this.editor.getValue());
        },
        sendRunRequest: function() {
          this.processing = true;
          this.code = this.editor.getValue();
          window.localStorage.setItem("code", this.code);
          let data = {
            code: this.code,
            input: this.input,
            compiler: this.cur_lang
          };
          fetch("/ide", {
              method: "POST",
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)
            })
            .then(res => res.text())
            .then(msg => {
              this.output = msg;
              this.processing = false;
            });
        }
      }
    });
